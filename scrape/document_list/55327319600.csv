Authors,Author(s) ID,Title,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,Cited by,DOI,Link,Affiliations,Authors with affiliations,Abstract,Author Keywords,Index Keywords,Molecular Sequence Numbers,Chemicals/CAS,Manufacturers,Funding Details,References,Correspondence Address,Editors,Sponsors,Publisher,Conference name,Conference date,Conference location,Conference code,ISSN,ISBN,CODEN,PubMed ID,Language of Original Document,Abbreviated Source Title,Document Type,Publication Stage,Open Access,Source,EID
"Adi E., Salomo I.","36179466500;55327319600;","Detect and sanitise encoded Cross-Site Scripting and SQL injection attack strings using a hash map",2010,"Proceedings of the 8th Australian Information Security Management Conference",,,,"1","7",,2,,"https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864571422&partnerID=40&md5=c7bbeff922da6830b88eedbde80f66a8","School of Computer Science, BINUS International, BINUS University, Indonesia","Adi, E., School of Computer Science, BINUS International, BINUS University, Indonesia; Salomo, I., School of Computer Science, BINUS International, BINUS University, Indonesia","Cross-Site Scripting (XSS) and SQL injection are the top vulnerabilities found in web applications. Attacks to these vulnerabilities could have been minimised through placing a good filter before the web application processes the malicious strings. However adversaries could craft variations on the attack strings in such a way that they do not get filtered. Checking through all of the possible attack strings was tedious and causes the web application performance to degrade. In this paper, we propose the use of a hash map as a data structure to address the issue. We implemented a proof-of-concept filter which we tested through an open-source web application to show that such filter could sanitise some attack strings that otherwise were too tedious to detect. Our evaluation included comparing the proposed solution with other existing ones such as prepared statements, input length limitation, white list and black list input validation; our proposed solution performed the most efficient.","Attack strings; Cross-Site Scripting; Hash map; SQL injection; Web application vulnerabilities; XSS","Attack strings; Cross site scripting; SQL injection; Web application vulnerability; XSS; Data structures; Industrial management; Security of data; World Wide Web",,,,,"Auger, R., (2009) Cross Site Scripting, , http://projects.webappsec.org/Cross-Site+Scripting, (12 30). Retrieved June 1, 2010, The Web Application Security Consortium; Auger, R., (2010) Improper Input Handling, , http://projects.webappsec.org/Improper-Input-Handling, (January). Retrieved June 1, 2010, from The Web Application Security Consortium; Fisk, H., Prepared Statements, , http://dev.mysql.com/tech-resources/articles/4.1/prepared-statements.html, Retrieved June 1, 2010, from MySQL developer zone; Grossman, J., (2007) WhiteHat Website Security Statistics Report, , http://www.whitehatsec.com/home/assets/WPStatsreport_100107.pdf, (October). Retrieved March 8, 2010; Kabutz, H.M., Closing Database Statements, , http://www.javaspecialists.eu/archive/Issue116.html, Retrieved June 1, 2010; Mills, E., (2009) Study: Cybercrime Cost Firms $1 Trillion Globally, , http://news.cnet.com/8301-1009_3-10152246-83.html, (January). Retrieved March 8, 2010; Ollmann, G., HTML Code Injection and Cross-site Scripting: Understanding the Cause and Effect of CSS (XSS) Vulnerabilities, , http://www.technicalinfo.net/papers/CSS.html, Retrieved June 1, 2010; Presson, M., (2008) White List Input Validation, Where It Becomes Hairy, , http://coding-insecurity.blogspot.com/2008/05/whitelist-input-validation- where-it.html, (May 2). Retrieved June 2, 2010, from Coding insecurity: General guidance on how to make your applications more secure; Stuttard, D., Pinto, M., (2008) The Web Application Hacker's Handbook, , Indianapolis, IN: Wiley Publishing, Inc; Wheeler, D., (2003) Secure Programmer: Validating Input, , http://www.ibm.com/developerworks/linux/library/l-sp2.html, (October). Retrieved June 10, 2010; Wiegenstein, A., Weidemann, F., (2007) Input Validation Is No Silver Bullet Against Hacker Attacks, , http://www.virtualforge.de/whitepapers/input_validation.pdf, (November 2). Retrieved June 1, 2010","Adi, E.; School of Computer Science, Indonesia; email: eadi@binus.edu",,"Mercury Technologies;Department of Mines and Petroleum;Emirates Airlines;SECAU - Securing Australia's Future;Edith Cowan University (ECU);Aust. New Zealand Forensic Sci. Soc. Inc., West Aust. Branch",,"8th Australian Information Security Management Conference, AISM","30 November 2010 through 2 December 2010","Perth, WA",91659,,9780729806886,,,"English","Proc. Aust. Inf. Secur. Manage. Conf.",Conference Paper,"Final","",Scopus,2-s2.0-84864571422
