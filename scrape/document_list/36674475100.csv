Authors,Author(s) ID,Title,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,Cited by,DOI,Link,Affiliations,Authors with affiliations,Abstract,Author Keywords,Index Keywords,Molecular Sequence Numbers,Chemicals/CAS,Manufacturers,Funding Details,References,Correspondence Address,Editors,Sponsors,Publisher,Conference name,Conference date,Conference location,Conference code,ISSN,ISBN,CODEN,PubMed ID,Language of Original Document,Abbreviated Source Title,Document Type,Publication Stage,Open Access,Source,EID
"Wang S., Lo D., Jiang L., Maoz S., Budi A.","54685504200;35269388000;55473381400;23089111200;36674475100;","Scalable Parallelization of Specification Mining Using Distributed Computing",2015,"The Art and Science of Analyzing Software Data",,,,"623","648",,2,"10.1016/B978-0-12-411519-4.00021-5","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84944033004&doi=10.1016%2fB978-0-12-411519-4.00021-5&partnerID=40&md5=6b05d4b53d287a8587ece2063f520fe7","School of Information Systems, Singapore Management University, Singapore; School of Computer Science, Tel Aviv University, Tel Aviv, Israel; School of Information Systems, BINUS University, Jakarta, Indonesia","Wang, S., School of Information Systems, Singapore Management University, Singapore; Lo, D., School of Information Systems, Singapore Management University, Singapore; Jiang, L., School of Information Systems, Singapore Management University, Singapore; Maoz, S., School of Computer Science, Tel Aviv University, Tel Aviv, Israel; Budi, A., School of Information Systems, BINUS University, Jakarta, Indonesia","Mining specifications from logs of execution traces has attracted much research effort in recent years since the mined specifications, such as program invariants, temporal rules, association patterns, or various behavioral models, may be used to improve program documentation, comprehension, and verification. At the same time, a major challenge faced by most specification mining algorithms is related to their scalability, specifically when dealing with many large execution traces.To address this challenge, we present a general, distributed specification mining algorithm that can parallelize and distribute repetitive specification mining tasks across multiple computers to achieve speedup proportional to the number of machines used. This general algorithm is designed on the basis of our observation that most specification mining algorithms are data and memory intensive while computationally repetitive. To validate the general algorithm, we instantiate it with five existing sequential specification mining algorithms (CLIPPER, Daikon, k-tails, LM, and Perracotta) on a particular distributed computing model (MapReduce) and one of its implementations (Hadoop) to create five parallelized specification mining algorithms, and demonstrate the much improved scalability of the algorithms over many large traces ranging from 41 MB to 157 GB collected from seven DaCapo benchmark programs. Our evaluation shows that our parallelized Perracotta running on four machines (using up to eight CPU cores in total) speeds up the original sequential one by 3-18 times The other four sequential algorithms are unable to complete analyzing the large traces, while our parallelized versions can complete the analysis and gain performance improvement by using more machines and cores. We believe that our general, distributed algorithm fits many specification mining algorithms well, and can be instantiated with them to gain more performance improvement and scalability improvement. © 2015 Elsevier Inc. All rights reserved.","Dynamic analysis; Execution profiles; Hadoop; MapReduce; Parallelization; Scalability; Specification mining","Distributed computer systems; Dynamic analysis; Program documentation; Scalability; Execution profiles; Hadoop; Map-reduce; Parallelizations; Specification mining; Specifications",,,,,"Lo, D., Khoo, S.C., Han, J., Liu, C., (2011) Mining software specifications: methodologies and applications, , CRC Press Data Mining and Knowledge Discovery Series; Lo, D., Khoo, S.C., Liu, C., Efficient mining of iterative patterns for software specification discovery (2007) KDD, pp. 460-469; Ernst, M.D., Perkins, J.H., Guo, P.J., McCamant, S., Pacheco, C., Tschantz, M.S., Xiao, C., The Daikon system for dynamic detection of likely invariants (2007) Sci Comput Program, 69 (1-3), pp. 35-45; Kumar, S., Khoo, S.C., Roychoudhury, A., Lo, D., Mining message sequence graphs (2011) ICSE, pp. 91-100; Lorenzoli, D., Mariani, L., Pezzè, M., Automatic generation of software behavioral models (2008) ICSE, pp. 501-510; Lo, D., Maoz, S., Khoo, S.C., Mining modal scenario-based specifications from execution traces of reactive systems (2007) ASE, pp. 465-468; Blackburn, S.M., Garner, R., Hoffmann, C., Khan, A.M., McKinley, K.S., Bentzur, R., Diwan, A., Wiedermann, B., The DaCapo benchmarks: Java benchmarking development and analysis (2006) OOPSLA, pp. 169-190; Yang, J., Evans, D., Bhardwaj, D., Bhat, T., Das, M., Perracotta: mining temporal API rules from imperfect traces (2006) ICSE, pp. 282-291; Miliaraki, I., Berberich, K., Gemulla, R., Zoupanos, S., Mind the gap: large-scale frequent sequence mining (2013) SIGMOD conference, pp. 797-808; Ene, A., Im, S., Moseley, B., Fast clustering using MapReduce (2011) KDD, pp. 681-689; Dyer, R., Nguyen, H.A., Rajan, H., Nguyen, T.N., Boa: a language and infrastructure for analyzing ultra-large-scale software repositories (2013) Proceedings of the 2013 international conference on software engineering, ICSE '13, pp. 422-431; Shang, W., Adams, B., Hassan, A.E., An experience report on scaling tools for mining software repositories using MapReduce (2010) ASE, pp. 275-284; Message Passing Interface, Forum, (2012) MPI: a message-passing interface standard, , http://www.mpi-forum.org/docs/docs.html, URL:; Dean, J., Ghemawat, S., MapReduce: Simplified data processing on large clusters (2004) OSDI, pp. 107-113; Apache Software, Foundation, (2013) Hadoop, , http://hadoop.apache.org/, URL:; Han, J., Kamber, M., (2006) Data mining: concepts and techniques, , Morgan Kauffman; El-Ramly, M., Stroulia, E., Sorenson, P.G., From run-time behavior to usage scenarios: an interaction-pattern mining approach (2002) KDD, pp. 315-324; Lo, D., Maoz, S., Scenario-based and value-based specification mining: better together (2010) ASE, pp. 387-396; Ammons, G., Bodík, R., Larus, J.R., Mining specifications (2002) POPL, pp. 4-16; Biermann, A., Feldman, J., On the synthesis of finite-state machines from samples of their behavior (1972) IEEE Trans Comput, 21, pp. 591-597; Briand, L.C., Labiche, Y., Leduc, J., Toward the reverse engineering of UML sequence diagrams for distributed Java software (2006) IEEE Trans Software Eng, 32 (9), pp. 642-663; de Sousa, F.C., Mendonça, N.C., Uchitel, S., Kramer, J., Detecting implied scenarios from execution traces (2007) WCRE, pp. 50-59; Damm, W., Harel, D., LSCs: breathing life into message sequence charts (2001) Formal Meth Syst Design, pp. 45-80; Harel, D., Maoz, S., Assert and negate revisited: modal semantics for UML sequence diagrams (2008) Software Syst Model, 7 (2), pp. 237-252; Livshits, V.B., Zimmermann, T., Dynamine: finding common error patterns by mining software revision histories (2005) ESEC/SIGSOFT FSE, pp. 296-305; Wasylkowski, A., Zeller, A., Mining temporal specifications from object usage (2011) Autom Softw Eng, 18 (3-4), pp. 263-292; Lo, D., Khoo, S.C., Liu, C., Mining temporal rules for software maintenance (2008) J Software Maintenance, 20 (4), pp. 227-247; Ho, Y.F., Chen, S.W., Chen, C.Y., Hsu, Y.C., Liu, P., A Mapreduce programming framework using message passing (2010) International computer symposium (ICS), pp. 883-888; http://msdn.microsoft.com/en-us/library/ff552840(v=vs.85).aspx, Microsoft. Static driver verifier: DDI compliance rules. URL: ; Pradel, M., Gross, T.R., Automatic generation of object usage specifications from large method traces (2009) ASE, pp. 371-382; Lo, D., Maoz, S., Mining scenario-based triggers and effects (2008) ASE, pp. 109-118; Chambers, C., Raniwala, A., Perry, F., Adams, S., Henry, R.R., Bradshaw, R., Weizenbaum, N., FlumeJava: easy, efficient data-parallel pipelines (2010) PLDI, pp. 363-375; Gabel, M., Su, Z., Online inference and enforcement of temporal properties (2010) ICSE, pp. 15-24; Li, Z., Zhou, Y., PR-Miner: automatically extracting implicit programming rules and detecting violations in large software code (2005) ESEC/SIGSOFT FSE, pp. 306-315; Nguyen, T.T., Nguyen, H.A., Pham, N.H., Al-Kofahi, J.M., Nguyen, T.N., Graph-based mining of multiple object usage patterns (2009) ESEC/SIGSOFT FSE, pp. 383-392; Shoham, S., Yahav, E., Fink, S., Pistoia, M., Static specification mining using automata-based abstractions (2007) ISSTA, pp. 174-184; Weimer, W., Necula, G.C., Mining temporal specifications for error detection (2005) TACAS, pp. 461-476; Bond, M.D., Coons, K.E., McKinley, K.S., Pacer: proportional detection of data races (2010) PLDI, pp. 255-268; Chen, F., Rosu, G., Mop: an efficient and generic runtime verification framework (2007) OOPSLA, pp. 569-588; Li, W., Forin, A., Seshia, S.A., Scalable specification mining for verification and diagnosis (2010) DAC, pp. 755-760; Dallmeier, V., Knopp, N., Mallon, C., Hack, S., Zeller, A., Generating test cases for specification mining (2010) ISSTA, pp. 85-96; Beschastnikh, I., Brun, Y., Schneider, S., Sloan, M., Ernst, M.D., Leveraging existing instrumentation to automatically infer invariant-constrained models (2011) SIGSOFT FSE, pp. 267-277; Wu, Q., Liang, G.T., Wang, Q.X., Mei, H., Mining effective temporal specifications from heterogeneous API data (2011) J Comput Sci Technol, 26 (6), pp. 1061-1075; Lo, D., Maoz, S., Towards succinctness in mining scenario-based specifications (2011) ICECCS, pp. 231-240; Alrajeh, D., Kramer, J., Russo, A., Uchitel, S., Learning from vacuously satisfiable scenario-based specifications (2012) FASE, pp. 377-393; Zhong, H., Zhang, L., Xie, T., Mei, H., Inferring resource specifications from natural language API documentation (2009) ASE, pp. 307-318; Lee, C., Chen, F., Rosu, G., Mining parametric specifications (2011) ICSE, pp. 591-600; Wei, Y., Furia, C.A., Kazmin, N., Meyer, B., Inferring better contracts (2011) ICSE, pp. 191-200; Csallner, C., Tillmann, N., Smaragdakis, Y., DySy: dynamic symbolic execution for invariant inference (2008) ICSE, pp. 281-290; Henkel, J., Reichenbach, C., Diwan, A., Developing and debugging algebraic specifications for Java classes (2008) ACM TOSEM, 17 (3), p. 14. , 1-37; Magill, S., Nanevski, A., Clarke, E., Lee, P., Inferring invariants in separation logic for imperative list-processing programs (2006) SPACE; Beschastnikh, I., Brun, Y., Abrahamson, J., Ernst, M.D., Krishnamurthy, A., Unifying FSM-inference algorithms through declarative specification (2013) ICSE, pp. 252-261; Robillard, M.P., Bodden, E., Kawrykow, D., Mezini, M., Ratchford, T., Automated API property inference techniques (2013) IEEE Trans Software Eng, 39 (5), pp. 613-637; Shang, W., Jiang, Z.M., Adams, B., Hassan, A.E., MapReduce as a general framework to support research in mining software repositories (MSR) (2009) MSR, pp. 21-30; Kang, U., Chau, D.H., Faloutsos, C., Mining large graphs: algorithms, inference, and discoveries (2011) ICDE, pp. 243-254; Liu, C., Guo, F., Faloutsos, C., BBM: Bayesian browsing model from petabyte-scale data (2009) KDD, pp. 537-546","Wang, S.; School of Information Systems, Singapore",,,"Elsevier Inc.",,,,,,9780124115439; 9780124115194,,,"English","The Art and Sci. of Anal. Softw. Data",Book Chapter,"Final","",Scopus,2-s2.0-84944033004
"Lucia L., Lo D., Jiang L., Thung F., Budi A.","57203232704;35269388000;55473381400;53265147700;36674475100;","Extended comprehensive study of association measures for fault localization",2014,"Journal of software: Evolution and Process","26","2",,"172","219",,52,"10.1002/smr.1616","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84900526835&doi=10.1002%2fsmr.1616&partnerID=40&md5=bcff482f3ef7fcf81c3589f2a27d5117","School of Information Systems, Singapore Management University, 80 Stamford Road, Singapore 178902, Singapore","Lucia, L., School of Information Systems, Singapore Management University, 80 Stamford Road, Singapore 178902, Singapore; Lo, D., School of Information Systems, Singapore Management University, 80 Stamford Road, Singapore 178902, Singapore; Jiang, L., School of Information Systems, Singapore Management University, 80 Stamford Road, Singapore 178902, Singapore; Thung, F., School of Information Systems, Singapore Management University, 80 Stamford Road, Singapore 178902, Singapore; Budi, A., School of Information Systems, Singapore Management University, 80 Stamford Road, Singapore 178902, Singapore","Spectrum-based fault localization is a promising approach to automatically locate root causes of failures quickly. Two well-known spectrum-based fault localization techniques, Tarantula and Ochiai, measure how likely a program element is a root cause of failures based on profiles of correct and failed program executions. These techniques are conceptually similar to association measures that have been proposed in statistics, data mining, and have been utilized to quantify the relationship strength between two variables of interest (e.g., the use of a medicine and the cure rate of a disease). In this paper, we view fault localization as a measurement of the relationship strength between the execution of program elements and program failures. We investigate the effectiveness of 40 association measures from the literature on locating bugs. Our empirical evaluations involve single-bug and multiple-bug programs. We find there is no best single measure for all cases. Klosgen and Ochiai outperform other measures for localizing single-bug programs. Although localizing multiple-bug programs, Added Value could localize the bugs with on average smallest percentage of inspected code, whereas a number of other measures have similar performance. The accuracies of the measures in localizing multi-bug programs are lower than single-bug programs, which provokes future research. Copyright © 2013 John Wiley & Sons, Ltd. Spectrum-based fault localization is a promising approach to automatically locate root causes of failures quickly. This paper investigates the effectiveness of 40 association measures to locate bugs. The evaluation shows there is no best single measure for all cases. Klosgen and Ochiai outperform other measures for localizing bugs in single-bug programs, whereas Added Value could localize bugs in multi-bug programs with the smallest percentage of inspected code. Future research is needed to better localize bugs in multi-bug programs. © 2013 John Wiley & Sons, Ltd.","Association Measures; Fault Localization; Program Spectra","Computer software; Added values; Association measures; Empirical evaluations; Fault localization; Program elements; Program execution; Program spectra; Root cause of failures; Program debugging",,,,,"Tassey, G., (2002) The Economic Impacts of Inadequate Infrastructure for Software Testing, , National Institute of Standards and Technology. Planning Report 02-3. 2002; Beizer, B., (1990) Software Testing Techniques, , 2nd edn. International Thomson Computer Press: Boston; Liblit, B., Naik, M., Zheng, A.X., Aiken, A., Jordan, M.I., Scalable Statistical bug Isolation (2005) Proc. ACM SIGPLAN 2005 Conference on Programming Language Design and Implementation (PLDI'05), pp. 15-26; Jones, J., Harrold, M.J., Empirical Evaluation of the Tarantula Automatic Fault-Localization Technique (2005) Proc. of International Conference on Automated Software Engineering (ASE'05), pp. 273-282; Renieris, M., Reiss, S., Fault Localization with Nearest Neighbor Queries (2003) Proc. of the 18th IEEE International Conference on Automated Software Engineering (ASE'03), pp. 141-154; Manevich, R., Sridharan, M., Adams, S., Das, M., Yang, Z., PSE: Explaining Program Failures via Postmortem Static Analysis (2004) Proc. of the 12th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE'04), pp. 63-72. , URL citeseer.ist.psu.edu/manevich04pse.html; Ko, A.J., Myers, B.A., Debugging Reinvented: Asking and Answering why and why not Questions about Program Behavior (2008) Proc. of the 30th International Conference on Software Engineering (ICSE'08), pp. 301-310; Gupta, N., He, H., Zhang, X., Gupta, R., (2005) Locating Faulty Code Using Failure-Inducing Chops, pp. 263-272. , ASE; Mayer, W., Stumptner, M., Model-based debugging - State of the Art and future challenges (2007) Electronic Notes in Theoretical Computer Science (ENTCS'07), pp. 61-82; Zeller, A., (2009) Why Programs Fail: A Guide to Systematic Debugging, , (2nd edition) Morgan Kaufmann; Qi, D., Roychoudhury, A., Liang, Z., Vaswani, K., Darwin: An Approach for Debugging Evolving Programs (2009) Proc. of the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT International Symposium on Foundations of Software Engineering (ESEC/SIGSOFT FSE'09), pp. 33-42; Liu, C., Yan, X., Fei, L., Han, J., Midkiff, S., Sober: Statistical Model-Based bug Localization (2005) Proc. of Joint Meeting of European Software Engineering Conference and ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/SIGSOFT FSE'05), pp. 286-295; Abreu, R., (2009) Spectrum-Based Fault Localization in Embedded Software, , PhD Thesis, Delft University of Technology; Chilimbi, T.M., Liblit, B., Mehra, K., Nori, A.V., Vaswani, K., Holmes: Effective Statistical Debugging via Efficient Path Profiling (2009) Proc. of IEEE 31st International Conference on Software Engineering (ICSE'09), pp. 34-44. , IEEE Computer Society doi: 10.1109/ICSE.2009.5070506; Jones, J., Harrold, M.J., Stasko, J., Visualization of Test Information to Assist Fault Localization (2002) Proc. of the 22nd International Conference on Software Engineering (ICSE'02), pp. 467-477; Abreu, R., Zoeteweij, P., Van Gemund, A.J.C., On the Accuracy of Spectrum-Based Fault Localization (2007) Mutation Testing: Academic and Industrial Conference Practice and Research Techniques (TAICPART-MUTATION'07); Abreu, R., Zoeteweij, P., Van Gemund, A.J., Spectrum-Based Multiple Fault Localization (2009) Proc. of the 24th IEEE/ACM International Conference on Automated Software Engineering (ASE'09), pp. 88-99; Agresti, A., (1996) An Introduction to Categorical Data Analysis, , John Wiley & Sons; Yule, G.U., On the association of attributes in statistics (1900) Philosophical Transcriptions of the Royal Society, A194, pp. 257-319; Yule, G.U., On the methods of measuring association between two attributes (1912) Journal of the Royal Statistical Society, 75, pp. 579-642; Abreu, R., Zoeteweij, P., Golsteijn, R., Van Gemund, A.J.C., A practical evalution on spectrum-based fault localization (2009) The Journal of System and Software, 82, pp. 1780-1792; Harrold, M.J., Rothermel, G., HR Variants, , http://www.cc.gatech.edu/aristotle/Tools/subjects/, Siemens Programs; Do, H., Elbaum, S.G., Rothermel, G., Supporting controlled experimentation with testing techniques: An infrastructure and its potential impact (2005) Empirical Software Engineering: An International Journal, 10 (4), pp. 405-435; Liblit, B., Aiken, A., Zheng, A.X., Jordan, M.I., Bug Isolation via Remote Program Sampling (2003) Proc. ACM SIGPLAN 2003 Conf. Programming Language Design and Implementation (PLDI 2003'03), pp. 141-154; Santelices, R., Jones, J., Yu, Y., Harrold, M.J., Lightweight Fault-Localization Using Multiple Coverage Types (2009) Proc. of the 31st International Conference on Software Engineering (ICSE'09), pp. 56-66; Artzi, S., Dolby, J., Tip, F., Pistoia, M., Directed Test Generation for Effective Fault Localization (2010) Proc. of the 19th International Symposium on Software Testing and Analysis (ISSTA'10), pp. 49-60; Artzi, S., Dolby, J., Tip, F., Pistoia, M., Practical Fault Localization for Dynamic web Applications (2010) Proc. of the 32nd ACM/IEEE International Conference on Software Engineering (ICSE'10), pp. 265-274; Bandyopadhyay, A., Ghosh, S., On the Effectiveness of the Tarantula Fault Localization Technique for Different Fault Classes (2011) Proc. of the 14th International IEEE Symposium on High-Assurance Systems Engineering (HASE'11), pp. 317-324; Pan, K., Kim, S., Je, J.W., Toward understanding bug fix patterns (2009) Empirical Software Engineering, 14, pp. 286-315; Jiang, B., Chan, W.K., Tse, T.H., On Practical Adequate Test Suites for Integrated Test Case Prioritization and Fault Localization (2011) Proc. of the 11th International Conference on Quality Software (QSIC'11), pp. 21-30; Zhang, X., Gupta, N., Gupta, R., Locating Faults Through Automated Predicate Switching (2006) Proc. of the 28th International Conference on Software Engineering (ICSE'06), pp. 272-281; Sterling, C.D., Olsson, R.A., Automated bug isolation via program chipping (2007) Software: Practice and Experience (SP&E), 37 (10), pp. 1061-1086. , John Wiley & Sons, Inc; Jeffrey, D., Gupta, N., Gupta, R., Fault localization using value replacement (2008) Proc. of the ACM/SIGSOFT International Symposium on Software Testing and Analysis (ISSTA'08), pp. 167-178; Feldman, A., Van Gemund, A., A two-Step Hierarchical Algorithm for Model-Based Diagnosis (2006) Proceedings of the 21st National Conference on on Artificial Intelligence, pp. 827-833. , AAAI Press: Boston, Massachusetts; Mayer, W., Stumptner, M., Evaluating Models for Model-Based Debugging (2008) Prof. of the 23rd IEEE/ACM International Conference on Automated Software Engineering (ASE'08)E, pp. 128-137; Mayer, W., Stumptner, M., Abstract Interpretation of Programs for Model-Based Debugging (2007) Proc. of the 20th International Joint Conference on Artificial Intelligence (IJCAI'07), pp. 471-476; Mayer, W., Abreu, R., Stumptner, M., Van Gemund, A., Prioritising Model-Based Debugging Diagnostic Reports (2008) Proceedings of the 20th International Workshop on Principles of Diagnosis (DX'08), pp. 127-134; Liblit, B., Aiken, A., (2002) Building A Better Backtrace: Techniques for Postmortem Program Analysis, , Technical Report CSD-02-1203, UC Berkeley; Tallam, S., Tian, C., Gupta, R., Dynamic Slicing of Multithreaded Programs for Race Detection (2008) Proc. of the 24th IEEE International Conference on Software Maintenance (ICSM'08), pp. 97-106; Parnin, C., Orso, A., Are Automated Debugging Techniques Actually Helping Programmers? (2011) Proc. of the 20th International Symposium on Software Testing and Analysis (ISSTA'11), pp. 199-209; Altman, R.B., Klein, T.E., Challenges for Biomedical Informatics and Pharmacogenomics (2002) Annual Review of Pharmacology and Toxicology, 42, pp. 113-133; Healey, J.F., (2008) Statistics: A Tool for Social Research, , http://www.amazon.com/Statistics-Research-Joseph-F-Healey/dp/0495096555, 8th edn. Wadsworth Publishing, (Available from:); Agrawal, R., Srikant, R., Fast Algorithms for Mining Association Rules (1994) Proc. of the 20th International Conference on Very Large Data Bases (VLDB'94), 1215, pp. 487-499; Tan, P.N., Kumar, V., Srivastava, J., Selecting the Right Interestingness Measure for Association Patterns (2002) Proc. 2002 ACM SIGKDD Int. Conf. Knowledge Discovery in Databases (KDD'02), pp. 32-41. , Edmonton, Canada; Geng, L., Hamilton, H., Interestingness measures for data mining: A survey (2006) ACM Computing Surveys, 38 (3), p. 9; Reps, T., Ball, T., Das, M., Larus, J., The use of program profiling for software maintenance with applications to the year 2000 problem (1997) Proc. of the 6th European Software Engineering Conference Held Jointly with the 5th ACM SIGSOFT Symposium on Foundations of Software Engineering (ESEC/FSE'97), pp. 432-449; Harrold, M., Rothermel, G., Sayre, K., Wu, R., Yi, L., An empirical investigation of the relationship between spectra differences and regression faults (2000) Software Testing, Verification and Reliability, 10 (3), pp. 171-194; Cohen, J., A coefficient of agreement for nominal scales (1960) Educational and Psychological Measurement, 20 (1), pp. 37-46; Smyth, P., Goodman, R., An information theoretic approach to rule induction from databases (1992) IEEE Trans. Knowledge and Data Eng., 4 (4), pp. 301-316; Gini, C., Variability and mutability, contribution to the study of statistical distributions and relations (1912) Studi Economico-Giuricici della R. Universita de Cagliari, 3 (PART 2), pp. 3-159. , (i-iii); Clark, P., Boswell, R., Rule Induction with cn2: Some Recent Improvements (1991) Machine Learning - EWSL-91, pp. 151-163; Brin, S., Motwani, R., Ullman, J.D., Tsur, S., Dynamic Itemset Counting and Implication Rules for Market Basket Analysis (1997) Proc. ACM SIGMOD International Conference on Management of Data (SIGMOD'97), pp. 255-264. , Tucson, AZ; Piatetsky-Shapiro, G., Discovery, analysis, and presentation of strong rules (1991) Knowledge Discovery in Databases, pp. 229-238. , MIT Press, Cambridge; Shortliffe, E., Buchanan, B., A model of inexact reasoning in medicine (1975) Mathematical Biosciences, 23, pp. 351-379; Aggarwal, C., Yu, P.S., A new framework for itemset generation (1998) Symposium on Principles of Database Systems (PODS'98), pp. 18-24; Hand, D.J., Mannila, H., Smyth, P., (2001) Principles of Data Mining, , MIT Press; Klosgen, W., Explora: A multipattern and multistrategy discovery assistant (1996) Advances in Knowledge Discovery and Data Mining, pp. 249-271. , American Association for Artificial Intelligence; Quinlan, J., (1993) C4.5: Programs for Machine Learning, , Morgan Kaufmann; Cheng, H., Lo, D., Zhou, Y., Wang, X., Yan, X., Identifying bug signatures using discriminative graph mining (2009) Proc. of the 18th International Symposium on Software Testing and Analysis (ISSTA'09), pp. 141-152; Ohsaki, M., Kitaguchi, S., Okamoto, K., Yokoi, H., Yamaguchi, T., Evaluation of Rule Interestingness Measures with a Clinical Dataset on Hepatitis (2004) Proc. of the 8th European Conference on Principles of Data Mining and Knowledge Discovery (PKDD'04), pp. 362-373; Goodman, L., Kruskal, W., Measures of association for cross classifications (1954) Journal of the American Statistical Association, 49, pp. 732-764; Dice, L.R., Measures of the amount of ecologic association between species (1945) Ecology, 26 (3), pp. 297-302; Sorensen, T., A method of establishing groups of equal amplitude in plant sociology based on similarity of species content and its application to analyses of the vegetation on danish commons (1948) Vidensk Selsk Biol Skr, 5 (4), pp. 1-34; Anderberg, M., (1973) Clustering Analysis for Applications, , Academic Press: London; Sokal, R.R., Michener, C., A statistical method for evaluating systematic relationships (1958) University of Kansas Science Bulletin, 38 (6), pp. 1409-1438; Rogers, J., Tanimoto, T.T., A computer program for classying plants (1960) Science, 132 (3434), pp. 1115-1118; Ochiai, A., Zoogeographic studies on the soleoid fishes found in japan and its neighbouring regions (1957) Bulletin of the Japanese Society of Scientific Fisheries, 22, pp. 26-530; Hutchins, M., Foster, H., Goradia, T., Ostrand, T., Experiments of the Effectiveness of Dataflow- and Controlflow-Based Test Adequacy Criteria (1994) Proc. of the 16th International Conference on Software Engineering (ICSE'94), pp. 191-200; Wilcoxon, F., Individual comparisons by ranking methods (1945) Biometrics Bulletin, 1, pp. 80-83. , http://www.jstor.org/stable/3001968, (Available from:)","Lucia, L.; School of Information Systems, Singapore Management University, 80 Stamford Road, Singapore 178902, Singapore; email: Lucia.2009@smu.edu.sg",,,"John Wiley and Sons Ltd",,,,,20477481,,,,"English","J. Softw. Evol. Process",Article,"Final","All Open Access, Green",Scopus,2-s2.0-84900526835
"Lucia, Lo D., Jiang L., Budi A.","36704909900;35269388000;55473381400;36674475100;","Kb e-anonymity: Test data anonymization for evolving programs",2012,"2012 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012 - Proceedings",,,,"262","265",,5,"10.1145/2351676.2351718","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84866912708&doi=10.1145%2f2351676.2351718&partnerID=40&md5=e3ab60bab729887552bc552f62c6b4bb","School of Information Systems, Singapore Management University, Singapore","Lucia, School of Information Systems, Singapore Management University, Singapore; Lo, D., School of Information Systems, Singapore Management University, Singapore; Jiang, L., School of Information Systems, Singapore Management University, Singapore; Budi, A., School of Information Systems, Singapore Management University, Singapore","High-quality test data that is useful for effective testing is often available on users' site. However, sharing data owned by users with software vendors may raise privacy concerns. Techniques are needed to enable data sharing among data owners and the vendors without leaking data privacy. Evolving programs bring additional challenges because data may be shared multiple times for every version of a program. When multiple versions of the data are crossreferenced, private information could be inferred. Although there are studies addressing the privacy issue of data sharing for testing and debugging, little work has explicitly addressed the challenges when programs evolve. In this paper, we examine kb-anonymity that is recently proposed for anonymizing data for a single version of a program, and identify a potential privacy risk if it is repeatedly applied for evolving programs. We propose kb e- anonymity to address the insufficiencies of kb-anonymity and evaluate our model on three Java programs. We demonstrate that kb e-anonymity can successfully address the potential risk of kb-anonymity, maintain sufficient path coverage for testing, and be as efficient as kb-anonymity. Copyright 2012 ACM.","Behavior preservation; K-anonymity; Privacy preservation; Testing and debugging","Data Sharing; Effective testing; High quality; Java program; K-Anonymity; Path coverage; Potential risks; Privacy concerns; Privacy issue; Privacy preservation; Privacy risks; Private information; Software vendors; Test data; Testing and debugging; Computer software; Data privacy; Java programming language; Program debugging",,,,,"ITrust, , http://sourceforge.net/projects/itrust/; Open Hospital, , http://sourceforge.net/projects/angal/; PDM, , http://sourceforge.net/projects/pdmanager/; Broadwell, P., Harren, M., Sastry, N., Scrash: A system for generating secure crash information (2003) 12th USENIX Security Symposium, pp. 273-284; Budi, A., Lo, D., Jiang, L., Lucia, Kb-anonymity: A model for anonymized behavior-preserving test and debugging data (2011) PLDI; Castro, M., Costa, M., Martin, J.-P., Better bug reporting with better privacy (2008) ASPLOS; Clause, J., Orso, A., Camouflage: Automated anonymization of field data (2011) ICSE; Grechanik, M., Csallner, C., Fu, C., Xie, Q., Is data privacy always good for software testing? (2010) ISSRE; Jayaraman, K., Harvison, D., Ganesh, V., Kiezun, A., JFuzz: A concolic tester for NASA Java (2009) NASA Formal Methods Workshop; Lucia, Lo, D., Jiang, L., Budi, A., Kbe-anonymity: Test data anonymization for evolving programs (2012) Technical Report, Singapore Management University, , http://www.mysmu.edu/phdis2009/lucia.2009/Publication.htm; Samarati, P., Protecting respondents' identities in microdata release (2001) IEEE TKDE; Taneja, K., Grechanik, M., Ghani, R., Xie, T., Testing software in age of data privacy: A balancing act (2011) FSE, pp. 201-211; Health Information Privacy, , http://www.hhs.gov/ocr/privacy/; Visser, W., Mehlitz, P., Model checking programs with Java path finder (2005) SPIN, , http://babelfish.arc.nasa.gov/trac/jpf; Wang, R., Wang, X., Li, Z., Panalyst: Privacy-aware remote error analysis on commodity software (2008) 17th USENIX Security Symposium, pp. 291-306","Lucia; School of Information Systems, Singapore; email: lucia.2009@smu.edu.sg",,"IEEE;IEEE Computer Society;Assoc. Comput. Mach., Spec. Interest Group Softw.;Eng. (ACM SIGSOFT);University of Zurich, Department of Informatics",,"2012 27th IEEE/ACM International Conference on Automated Software Engineering, ASE 2012","3 September 2012 through 7 September 2012","Essen",92925,,9781450312042,,,"English","IEEE/ACM Int. Conf. Autom. Softw. Eng., ASE - Proc.",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84866912708
"Lucia, Lo D., Jiang L., Budi A.","36704909900;35269388000;55473381400;36674475100;","Active refinement of clone anomaly reports",2012,"Proceedings - International Conference on Software Engineering",,, 6227175,"397","407",,21,"10.1109/ICSE.2012.6227175","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864192776&doi=10.1109%2fICSE.2012.6227175&partnerID=40&md5=78e2de52e91bfecd8112545f00d95d3d","School of Information Systems, Singapore Management University, Singapore","Lucia, School of Information Systems, Singapore Management University, Singapore; Lo, D., School of Information Systems, Singapore Management University, Singapore; Jiang, L., School of Information Systems, Singapore Management University, Singapore; Budi, A., School of Information Systems, Singapore Management University, Singapore","Software clones have been widely studied in the recent literature and shown useful for finding bugs because inconsistent changes among clones in a clone group may indicate potential bugs. However, many inconsistent clone groups are not real bugs (true positives). The excessive number of false positives could easily impede broad adoption of clone-based bug detection approaches. In this work, we aim to improve the usability of clone-based bug detection tools by increasing the rate of true positives found when a developer analyzes anomaly reports. Our idea is to control the number of anomaly reports a user can see at a time and actively incorporate incremental user feedback to continually refine the anomaly reports. Our system first presents top few anomaly reports from the list of reports generated by a tool in its default ordering. Users then either accept or reject each of the reports. Based on the feedback, our system automatically and iteratively refines a classification model for anomalies and re-sorts the rest of the reports. Our goal is to present the true positives to the users earlier than the default ordering. The rationale of the idea is based on our observation that false positives among the inconsistent clone groups could share common features (in terms of code structure, programming patterns, etc.), and these features can be learned from the incremental user feedback. We evaluate our refinement process on three sets of clone-based anomaly reports from three large real programs: the Linux Kernel (C), Eclipse, and ArgoUML (Java), extracted by a clone-based anomaly detection tool. The results show that compared to the original ordering of bug reports, we can improve the rate of true positives found (i.e., true positives are found faster) by 11%, 87%, and 86% for Linux kernel, Eclipse, and ArgoUML, respectively. © 2012 IEEE.",,"Anomaly detection; Bug detection; Bug reports; Classification models; Code structure; False positive; Linux kernel; Programming patterns; Refinement process; Software clones; True positive; User feedback; C (programming language); Computer software; Inspection equipment; Java programming language; Program debugging; Cloning",,,,,"Livieri, S., Higo, Y., Matsushita, M., Inoue, K., Very-large scale code clone analysis and visualization of open source programs using distributed ccfinder (2007) ICSE; Baxter, I.D., Pidgeon, C., Mehlich, M., DMS©: Program transformations for practical scalable software evolution (2004) ICSE; Baker, B.S., Finding clones with Dup: Analysis of an experiment (2007) IEEE TSE; Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multilinguistic token-based code clone detection system for large scale source code (2002) IEEE TSE; Jiang, L., Misherghi, G., Su, Z., Glondu, S., DECKARD: Scalable and accurate tree-based detection of code clones (2007) ICSE; Higo, Y., Kusumoto, S., Inoue, K., A metric-based approach to identifying refactoring opportunities for merging code clones in a java software system (2008) Journal of Software Maintenance, 20 (6), pp. 435-461; Duala-Ekoko, E., Robillard, M.P., Tracking code clones in evolving software (2007) ICSE; Nguyen, T.T., Nguyen, H.A., Pham, N.H., Al-Kofahi, J.M., Nguyen, T.N., Clone-aware configuration management (2009) ASE; Kim, M., Sazawal, V., Notkin, D., Murphy, G., An empirical study of code clone genealogies (2005) ESEC/FSE; Kapser, C., Godfrey, M.W., Cloning considered harmful"" considered harmful (2006) WCRE; Juergens, E., Deissenboeck, F., Hummel, B., Wagner, S., Do code clones matter? (2009) ICSE; Jiang, L., Su, Z., Chiu, E., Context-based detection of clone-related bugs (2007) ESEC/SIGSOFT FSE; Krinke, J., A study of consistent and inconsistent changes to code clones (2007) WCRE; Li, Z., Lu, S., Myagmar, S., Zhou, Y., CP-Miner: A tool for finding copy-paste and related bugs in operating system code (2004) OSDI; Gabel, M., Yang, J., Yu, Y., Goldszmidt, M., Su, Z., Scalable and systematic detection of buggy inconsistencies in source code (2010) OOPSLA; Hayase, Y., Lee, Y.Y., Inoue, K., A criterion for filtering code clone related bugs (2008) DEFECTS; Lee, J.-G., Han, J., Li, X., Cheng, H., Mining discriminative patterns for classifying trajectories on road networks (2011) IEEE Trans. Knowl. Data Eng.; Bosch, A., Zisserman, A., Munoz, X., Scene classification using a hybrid generative/discriminative approach (2008) IEEE Trans. Pattern Anal. Mach. Intell.; Elbaum, S., Malishevsky, A., Rothermel, G., Test case prioritization: A family of empirical studies (2002) IEEE Trans. Software Eng., 28, pp. 159-182; Wahler, V., Seipel, D., Von Gudenberg, J.W., Fischer, G., Clone detection in source code by frequent itemset techniques (2004) SCAM; Komondoor, R., Horwitz, S., Using slicing to identify duplication in source code (2001) SAS; Podgurski, A., Pierce, L., Retrieving reusable software by sampling behavior (1993) ACM TOSEM; Jarzabek, S., Li, S., Eliminating redundancies with a composition with adaptation"" meta-programming technique (2003) ESEC/FSE; Rajapakse, D.C., Jarzabek, S., Using server pages to unify clones in web applications: A trade-off analysis (2007) ICSE; Jablonski, P., Hou, D., CReN: A tool for tracking copy-and- Paste code clones and renaming identifiers consistently in the IDE (2007) ETX; Kim, S., Zimmermann, T., W Jr., E.J., Zeller, A., Predicting faults from cached history (2007) ICSE; Kim, S., Ernst, M.D., Which warnings should i fix first? (2007) ESEC-FSE; Ruthruff, J.R., Penix, J., Morgenthaler, J.D., Elbaum, S., Rothermel, G., Predicting accurate and actionable static analysis warnings: An experimental approach (2008) ICSE; Zimmermann, T., Nagappan, N., Gall, H., Giger, E., Murphy, B., Cross-project defect prediction: A large scale experiment on data vs. domain vs. process (2009) ESEC/FSE; Podgurski, A., Leon, D., Francis, P., Masri, W., Minch, M., Sun, J., Wang, B., Automated support for classifying software failure reports (2003) ICSE, pp. 465-477; Kremenek, T., Engler, D., Z-ranking: Using statistical analysis to counter the impact of static analysis approximation (2003) SAS, pp. 295-315; Heckman, S., Williams, L., On establishing a benchmark for evaluating static analysis alert prioritization and classification techniques (2008) ESEM, pp. 41-50; Quinlan, J., (1993) C4.5: Programs for Machine Learning, , Morgan Kaufmann; Holmes, G., Donkin, A., Witten, I., Weka: A machine learning workbench Proc Second Australia and New Zealand Conference on Intelligent Information Systems, 1994; Han, J., Kamber, M., (2006) Data Mining Concepts and Techniques, , 2nd ed. Morgan Kaufmann; Renieris, M., Reiss, S., Fault localization with nearest neighbor queries (2003) ASE, pp. 30-39; Martin, B., (1995) Instance-based Learning: Nearest Neighbor with Generalization., , Thesis, University of Waikato, Hamilton, New Zealand; Tan, S., An effective refinement strategy for knn text classifier (2006) Expert Syst. Appl.; Moore, A., An Introductory Tutorial on KD-Trees, , Computer Laboratory, University of Cambridge, Tech. Rep. 209, 1991, extract from Andrew Moore PhD Thesis: Efficient Memory-based Learning for Robot Control; Salzberg, S., A nearest hyperrectangle learning method (1991) Machine Learning; Wettschereck, D., Dietterich, G., An experimental comparison of the nearest-neighbour and nearest-hyperrectangle algorithms (1994) Machine Learning; Mitchell, T.M., (1997) Machine Learning, , New York, USA: McGraw-Hill, March","Lucia; School of Information Systems, Singapore; email: lucia.2009@smu.edu.sg",,"IEEE Computer Society;ACM;University of Zurich (UZH), Department of Informatics;Technical Council on Software Engineering (TCSE);Special Interest Group on Software Engineering (SIGSOFT);SI-SE",,"34th International Conference on Software Engineering, ICSE 2012","2 June 2012 through 9 June 2012","Zurich",91326,02705257,9781467310673,PCSED,,"English","Proc Int Conf Software Eng",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-84864192776
"Budi A., Wang M., Wang T.","36674475100;56129275300;56129243000;","IDM products vs. services: A comparative analysis",2011,"Understanding the Interactive Digital Media Marketplace: Frameworks, Platforms, Communities and Issues",,,,"43","51",,,"10.4018/978-1-61350-147-4.ch005","https://www.scopus.com/inward/record.uri?eid=2-s2.0-84899215340&doi=10.4018%2f978-1-61350-147-4.ch005&partnerID=40&md5=bae25b85d1802f1f7bab641bec5224d8","Nanyang Technological University, Singapore","Budi, A., Nanyang Technological University, Singapore; Wang, M., Nanyang Technological University, Singapore; Wang, T., Nanyang Technological University, Singapore","In today's increasingly competitive market, marketing a product or a service is getting tougher than before, especially in the industry domain of interaction digital media (IDM), which produces completely different types of digital goods. Knowing the key differences between them is vital, as it will allow IDM companies to position resources more effectively. Moreover, it will help get more profits from investments. Unfortunately, research done on this topic is still rare and inadequate. This chapter aims to give a comparative analysis between the digital products and services study from the perspective of marketing, in a bid to better understand their differences and similarities. The comparative analysis is divided into different stages according to the new digital goods development process. We use two case studies to support the points of view: WSJ.com and PayPal. Directions for future research are discussed at the end of this chapter. © 2012, IGI Global.",,,,,,,"Alvarez, A.B., Casielles, R.V., Consumer evaluations of sale promotion: The effect on brand choice (2005) European Journal of Marketing, 39 (1), pp. 54-70. , doi:10.1108/03090560510572016; Anshin, P., Shiizuka, H., Getting closer to the consumer: The digitization of content distribution (2006) Lecture Notes In Computer Science, 4253, pp. 988-996. , doi:10.1007/11893011_125; (2009) The Online Newspaper User, pp. 28-29. , Campaign, U. K., Campaign, UK: Retrieved from Business Source Premier Database; PayPal: 10 years of successful operation highlight the potential threat to card issuers (2008) MarketWatch: Global Round-up, 7 (8), p. 134. , Datamonitor; Dolliver, M., Pay for online newspaper? (2010) Hah! Adweek, 51 (2), p. 17; Edvardsson, B., Johnson, M.D., Gustafsson, A., Strandvik, T., The effects of satisfaction and loyalty on profits and growth: Products versus services (2003) Total Quality Management & Business Excellence, 11 (7), pp. 917-927; Hui, K.L., Chau, P.Y.K., Classifying digital products (2002) Communications of the ACM, p. 45; Manyika, J., Roberts, R., Sprague, K., Eight business technology trends to watch (2008) The McKinsey Quarterly, 1, pp. 60-71; Powers Jr., W.C., (1998) Distinguishing Between Products and Services In Strict Liability; Prabalad, C., Ramaswamy, V., (2004) The Future of Competition: Co-creating Unique Value With Customers, , Boston, MA: Harvard Business School Press; Murdoch Won't Make All WSJ.com Content Free (2008) Red Herring, 5. , Reuters News; Roberts, J., (2008) Case Study - PayPal: Plug and Pay, p. 20. , Brand Strategy; Schatt, D., Two deals by eBay unit to enable banks to support PayPal payments (2009) Cards & Payments, 22 (11), pp. 10-11; Scott, D.M., (2005) Cashing In With Content: How Innovative Marketers Use Digital Information to Turn Browsers Into Buyers, , New Jersey, Cyber Age Books; Tapscott, D.W., Anthony, D., (2006) Wikinomics: How Mass Collaboration Changes Everything, , New York, NY: Portfolio Hardcover; Ward, S., (2010) Selling, , http://sbinfocanada.about.com/od/marketing/g/selling.htm, The New York Times Company. Retrieved April 13, 2010, from; Werbach, K., Syndication: The emerging model for business in the internet era (2000) Harvard Business Review, 78, pp. 85-93","Nanyang Technological UniversitySingapore",,,"IGI Global",,,,,,9781613501474,,,"English","Underst. the Interact. Digital Media Marketpl.: Frameworks, Platforms, Communities and Issues",Book Chapter,"Final","",Scopus,2-s2.0-84899215340
"Budi A., Lo D., Jiang L., Lucia","36674475100;35269388000;55473381400;36704909900;","kb-anonymity: A model for anonymized behaviour-preserving test and debugging data",2011,"Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)",,,,"447","457",,17,"10.1145/1993498.1993551","https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959876214&doi=10.1145%2f1993498.1993551&partnerID=40&md5=2cd6bba40e7fbb66292b775da814742c","School of Information System, Singapore Management University, Singapore","Budi, A., School of Information System, Singapore Management University, Singapore; Lo, D., School of Information System, Singapore Management University, Singapore; Jiang, L., School of Information System, Singapore Management University, Singapore; Lucia, School of Information System, Singapore Management University, Singapore","It is often very expensive and practically infeasible to generate test cases that can exercise all possible program states in a program. This is especially true for a medium or large industrial system. In practice, industrial clients of the system often have a set of input data collected either before the system is built or after the deployment of a previous version of the system. Such data are highly valuable as they represent the operations that matter in a client's daily business and may be used to extensively test the system. However, such data often carries sensitive information and cannot be released to third-party development houses. For example, a healthcare provider may have a set of patient records that are strictly confidential and cannot be used by any third party. Simply masking sensitive values alone may not be sufficient, as the correlation among fields in the data can reveal the masked information. Also, masked data may exhibit different behavior in the system and become less useful than the original data for testing and debugging. For the purpose of releasing private data for testing and debugging, this paper proposes the kb-anonymity model, which combines the k-anonymity model commonly used in the data mining and database areas with the concept of program behavior preservation. Like k-anonymity, kb-anonymity replaces some information in the original data to ensure privacy preservation so that the replaced data can be released to third-party developers. Unlike k-anonymity, kb-anonymity ensures that the replaced data exhibits the same kind of program behavior exhibited by the original data so that the replaced data may still be useful for the purposes of testing and debugging. We also provide a concrete version of the model under three particular configurations and have successfully applied our prototype implementation to three open source programs, demonstrating the utility and scalability of our prototype. © 2011 ACM.","behavior preservation; k-anonymity; symbolic execution; third-party testing and debugging","behavior preservation; Health care providers; Industrial systems; Input datas; K-Anonymity; Masked data; Open-source program; Patient record; Privacy preservation; Private data; Program behavior; Program state; Prototype implementations; Sensitive informations; Symbolic execution; Test case; Testing and debugging; Third parties; Third-party development; third-party testing and debugging; Computer programming languages; Health care; Software testing; Program debugging",,,,,"Choco Solver, , http://www.emn.fr/z-info/choco-solver/; Fujitsu Develops Technology to Enhance Comprehensive Testing of Java Programs, , http://www.fujitsu.com/global/news/pr/archives/month/2010/20100112-02. html; ITrust, , http://sourceforge.net/projects/itrust/; http://sourceforge.net/projects/angal/, Open hospital; http://sourceforge.net/projects/pdmanager/, PDmanager; Aggarwal, G., Feder, T., Kenthapadi, K., Khuller, S., Panigrahy, R., Thomas, D., Zhu, A., Achieving anonymity via clustering (2006) PODS, pp. 153-162; Aggarwal, G., Feder, T., Kenthapadi, K., Motwani, R., Panigrahy, R., Thomas, D., Zhu, A., Approximation algorithms for k-anonymity Int. Conf. on Data Theory, 2005; Anand, S., Pasareanu, C., Visser, W., JPF-SE: A symbolic execution extenion to Java PathFinder (2007) TACAS; Artzi, S., Dolby, J., Tip, F., Pistoia, M., Directed test generation for effective fault localization (2010) ISSTA, pp. 49-60; Backstrom, L., Dwork, C., Kleinberg, J., Wherefore art thou r3579x? Anonymized social networks, hidden patterns, and structural steganography (2007) WWW, pp. 181-190; Broadwell, P., Harren, M., Sastry, N., Scrash: A system for generating secure crash information (2003) 12th USENIX Security Symposium, pp. 273-284; Cadar, C., Dunbar, D., Engler, D.R., KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs (2008) OSDI, pp. 209-224; Cleland-Huang, J., Czauderna, A., Gibiec, M., Emenecker, J., A machine learning approach for tracing regulatory codes to product specific requirements (2010) ICSE, pp. 155-164; Enck, W., Gilbert, P., Gon Chun, B., Cox, L.P., Jung, J., McDaniel, P., Sheth, A.N., TaintDroid: An information-flow tracking system for realtime privacy monitoring on smartphones (2010) OSDI; Godefroid, P., Klarlund, N., Sen, K., DART: Directed automated random testing (2005) PLDI, pp. 213-223. , ACM; Godefroid, P., Levin, M.Y., Molnar, D.A., Automated whitebox fuzz testing (2008) NDSS; Golle, P., Revisiting the uniqueness of simple demographics in the US population (2006) 5th ACM Workshop on Privacy in Electronic Society (WPES), pp. 77-80; Jayaraman, K., Harvison, D., Ganesh, V., Kiezun, A., jFuzz: A concolic tester for NASA Java NASA Formal Methods Workshop, 2009; Jeffrey, D., Gupta, N., Gupta, R., Fault localization using value replacement (2008) ISSTA, pp. 167-178; Khurshid, S., Pǎsǎreanu, C.S., Visser, W., Generalized symbolic execution for model checking and testing (2003) TACAS, pp. 553-568; King, J.C., Symbolic execution and program testing (1976) Commun. ACM, 19 (7), pp. 385-394; Li, N., Li, T., Venkatasubramanian, S., T-closeness: Privacy beyond k-anonymity and l-diversity Int. Conf. Data Eng., 2007; Liblit, B., Aiken, A., Zheng, A.X., Jordan, M.I., Bug isolation via remote program sampling (2003) PLDI, pp. 141-154. , June; Livshits, V.B., Nori, A.V., Rajamani, S.K., Banerjee, A., Merlin: Specification inference for explicit information flow problems (2009) PLDI, pp. 75-86; Machanavajjhala, A., Kifer, D., Gehrke, J., Venkitasubramaniam, M., L-diversity: Privacy beyond k-anonymity (2007) ACM Trans. Knowl. Discov. Data, 1 (1); McCamant, S., Ernst, M.D., Quantitative information flow as network flow capacity (2008) PLDI, pp. 193-205; Métayer, D.L., Maarek, M., Tong, V.V.T., Mazza, E., Potet, M.-L., Craipeau, N., Frénot, S., Hardouin, R., Liability in software engineering: Overview of the LISE approach and illustration on a case study (2010) ICSE, pp. 135-144; Penta, M.D., German, D.M., Guéhéneuc, Y.-G., Antoniol, G., An exploratory study of the evolution of software licensing (2010) ICSE, pp. 145-154; Person, S., Dwyer, M.B., Elbaum, S.G., Pasareanu, C.S., Differential symbolic execution (2008) FSE, pp. 226-237; Rothermel, G., Untch, R.H., Chu, C., Harrold, M.J., Prioritizing test cases for regression testing (2001) IEEE Trans. Software Eng., pp. 929-948; Sabelfeld, A., Myers, A.C., Language-based information-flow security (2003) IEEE Journal on Selected Areas in Communications, 21 (1), pp. 5-19; Samarati, P., Protecting respondents' identities in microdata release (2001) IEEE Transactions on Knowledge and Data Engineering; Santelices, R.A., Chittimalli, P.K., Apiwattanapong, T., Orso, A., Harrold, M.J., Test-suite augmentation for evolving software (2008) ASE, pp. 218-227; Santelices, R.A., Harrold, M., Exploiting program dependencies for scalable multiple-path symbolic execution (2010) ISSTA, pp. 195-206; Santelices, R.A., Jones, J.A., Yu, Y., Harrold, M.J., Lightweight fault-localization using multiple coverage types (2009) ICSE, pp. 56-66; Sen, K., Marinov, D., Agha, G., CUTE: A concolic unit testing engine for C (2005) FSE, pp. 263-272; Sweeney, L., (2000) Uniqueness of Simple Demographics in the U.S. Population, , Technical Report LIDAP-WP4, Carnegie Mellon University, School of Computer Science, Data Privacy Laboratory; Sweeney, L., K-anonymity: A model for protecting privacy (2002) International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems, 10, pp. 557-570; Visser, W., Mehlitz, P., Model checking programs with Java PathFinder (2005) SPIN, , http://babelfish.arc.nasa.gov/trac/jpf; Wang, R., Wang, X., Li, Z., Panalyst: Privacy-aware remote error analysis on commodity software (2008) 17th USENIX Security Symposium, pp. 291-306; Xiao, X., Tao, Y., M-invariance: Towards privacy preserving republication of dynamic datasets (2007) SIGMOD, pp. 689-700; Xie, T., Marinov, D., Schulte, W., Notkin, D., Symstra: A framework for generating object-oriented unit tests using symbolic execution (2005) TACAS, pp. 365-381; Zeller, A., Isolating cause-effect chains from computer programs (2002) FSE, pp. 1-10; Zhang, X., Gupta, N., Gupta, R., Locating faults through automated predicate switching (2006) ICSE, pp. 272-281; Zhu, D., Jungy, J., Song, D., Kohnoz, T., Wetherall, D., TaintEraser: Protecting sensitive data leaks using application-level taint tracking (2011) ACM SIGOPS Operating Systems Review, 45 (1)","Budi, A.; School of Information System, Singapore; email: adityabudi@smu.edu.sg",,"ACM SIGPLAN",,"32nd ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI'11","4 June 2011 through 8 June 2011","San Jose, CA",85388,,9781450306638,PSPIE,,"English","Proc ACM SIGPLAN Conf Program Lang Des Implementation PLDI",Conference Paper,"Final","",Scopus,2-s2.0-79959876214
"Lucia, Lo D., Jiang L., Budi A.","36704909900;35269388000;55473381400;36674475100;","Comprehensive evaluation of association measures for fault localization",2010,"IEEE International Conference on Software Maintenance, ICSM",,, 5609542,"","",,50,"10.1109/ICSM.2010.5609542","https://www.scopus.com/inward/record.uri?eid=2-s2.0-78650139747&doi=10.1109%2fICSM.2010.5609542&partnerID=40&md5=31eb1f6734fe492863cfffc825c7a457","School of Information Systems, Singapore Management University, Singapore","Lucia, School of Information Systems, Singapore Management University, Singapore; Lo, D., School of Information Systems, Singapore Management University, Singapore; Jiang, L., School of Information Systems, Singapore Management University, Singapore; Budi, A., School of Information Systems, Singapore Management University, Singapore","In statistics and data mining communities, there have been many measures proposed to gauge the strength of association between two variables of interest, such as odds ratio, confidence, Yule-Y, Yule-Q, Kappa, and gini index. These association measures have been used in various domains, for example, to evaluate whether a particular medical practice is associated positively to a cure of a disease or whether a particular marketing strategy is associated positively to an increase in revenue, etc. This paper models the problem of locating faults as association between the execution or non-execution of particular program elements with failures. There have been special measures, termed as suspiciousness measures, proposed for the task. Two state-of-the-art measures are Tarantula and Ochiai, which are different from many other statistical measures. To the best of our knowledge, there is no study that comprehensively investigates the effectiveness of various association measures in localizing faults. This paper fills in the gap by evaluating 20 wellknown association measures and compares their effectiveness in fault localization tasks with Tarantula and Ochiai. Evaluation on the Siemens programs show that a number of association measures perform statistically comparable as Tarantula and Ochiai. © 2010 IEEE.",,"Association measures; Comprehensive evaluation; Data mining community; Fault localization; Gini Index; Marketing strategy; Medical practice; Odds ratios; Paper models; Siemens; Statistical measures; Two-state; Computer software maintenance; Marketing; Maintainability",,,,,"Abreu, R., (2009) Spectrum-based Fault Localization in Embedded Software, , Ph.D. dissertation, Delft University of Technology; Abreu, R., Zoeteweij, P., Van Gemund, A.J.C., On the accuracy of spectrum-based fault localization (2007) Mutation Testing: Academic and Industrial Conference Practice and Research Techniques (TAICPARTMUTATION); Abreu, R., Zoeteweij, P., Van Gemund, A.J., Spectrum-based multiple fault localization (2009) IEEE/ACM International Conference on Automated Software Engineering, , Auckland, New Zealand; Aggarwal, C., Yu, P.S., A new framework for itemset generation (1998) Symposium on Principles of Database Systems (PODS); Agrawal, R., Srikant, R., Fast algorithms for mining association rules (1994) Proc. of Int. Conf. on Very Large Data Bases; Agresti, A., (1996) An Introduction to Categorical Data Analysis, , JohnWiley & Sons; Altman, R.B., Klein, T.E., Challenges for biomedical informatics and pharmacogenomics (2002) Annu. Rev. Pharmacol. Toxicol., 42, pp. 113-133; Beizer, B., (1990) Software Testing Techniques, , 2nd ed. Boston: International Thomson Computer Press; Brin, S., Motwani, R., Ullman, J.D., Tsur, S., Dynamic itemset counting and implication rules for market basket analysis (1997) SIGMOD, pp. 255-264; Cheng, H., Lo, D., Zhou, Y., Wang, X., Yan, X., Identifying bug signatures using discriminative graph mining (2009) ISSTA; Chilimbi, T.M., Liblit, B., Mehra, K., Nori, A.V., Vaswani, K., Holmes: Effective statistical debugging via efficient path profiling (2009) ICSE, pp. 34-44; Clark, P., Boswell, R., Rule induction with cn2: Some recent improvements (1991) Machine Learning - EWSL-91, p. 151163; Cleve, H., Zeller, A., Locating causes of program failures (2005) ICSE, pp. 342-351; Liu, C., Yan, X., Fei, L., Han, J., Midkiff, S., Sober: Statistical modelbased bug localization (2005) ESEC/FSE, , Lisbon, Portugal, Sep; Cohen, J., A coefficient of agreement for nominal scales (1960) Educational and Psychological Measurement, 20 (1), pp. 37-46; Do, H., Elbaum, S.G., Rothermel, G., Supporting controlled experimentation with testing techniques: An infrastructure and its potential impact (2005) Empirical Software Engineering: An International Journal, 10 (4), pp. 405-435; Feldman, A., Van Gemund, A., A two-step hierarchical algorithm for model-based diagnosis (2006) Proceedings of the 21st National Conferenceon on Artificial Intelligence, pp. 827-833. , Boston,Massachusetts:AAAIPress; Geng, L., Hamilton, H., Interestingness measures for data mining: A survey (2006) ACM Computing Surveys; Gini, C., Variability and mutability, contribution to the study of statistical distributions and relations (1912) Studi Economico-Giuricici della R. Universita de Cagliari, 3 (1-3 PART 2), pp. 3-159; Gupta, N., He, H., Zhang, X., Gupta, R., Locating faulty code using failure-inducing chops (2005) ASE, pp. 263-272; Hand, D.J., Mannila, H., Smyth, P., (2001) Principles of Data Mining, , MIT Press; Harrold, M., Rothermel, G., Sayre, K., Wu, R., Yi, L., An empirical investigation of the relationship between spectra differences and regression faults (2000) Software Testing, Verification and Reliability, 10 (3), pp. 171-194; Healey, J.F., (2008) Statistics: A Tool for Social Research, , http://www.amazon.com/Statistics-Research-Joseph-F-Healey/dp/0495096555, 8th ed. Wadsworth Publishing. [Online]. Available; Hutchins, M., Foster, H., Goradia, T., Ostrand, T., Experiments of the effectiveness of dataflow- and controlflow-based test adequacy criteria (1994) Proc. of ICSE, pp. 191-200; Jeffrey, D., Gupta, N., Gupta, R., Fault localization using value replacement (2008) International Symposium on Software Testing and Analysis; Jones, J., Harrold, M., Stasko, J., Visualization of test information to assist fault detection (2002) Proc. of Internation Conference on Software Engineering, pp. 467-477. , Orlando, Florida, May; Jones, J., Harrold, M., Empirical evaluation of the tarantula automatic fault-localization technique (2005) Proc. of International Conference on Automated Software Engineering; Klosgen, W., Explora: A multipattern and multistrategy discovery assistant (1996) Advances in Knowledge Discovery and Data Mining; Ko, A.J., Myers, B.A., Debugging reinvented:asking and answering why and why not questions about program behavior (2008) International Conference on Software Engineering; Liblit, B., Aiken, A., Zheng, A.X., Jordan, M.I., Bug isolation via remote program sampling (2003) Proc. ACM SIGPLAN 2003 Conf. Programming Language Design and Implementation (PLDI 2003), pp. 141-154. , San Diego, CA, June; Liblit, B., Naik, M., Zheng, A.X., Aiken, A., Jordan, M.I., Scalable statistical bug isolation (2005) Proc. ACM SIGPLAN 2005 Int. Conf .Programming Language Design and Implementation (PLDI'05), , June; Liblit, B., Aiken, A., Building a better backtrace: Techniques for postmortem program analysis (2002) UC Berkeley, Tech. Rep. CSD-02-1203; Manevich, R., Sridharan, M., Adams, S., Das, M., Yang, Z., PSE: Explaining program failures via postmortem static analysis (2004) FSE, , [Online]. Available: citeseer.ist.psu.edu/manevich04pse.html; Mayer, W., Stumptner, M., Model-based debugging - State of the art and future challenges (2007) Electronic Notes in Theoretical Computer Science (ENTCS), 174 (4); Piatetsky-Shapiro, G., Discovery, analysis, and presentation of strong rules (1991) KDD; Qi, D., Roychoudhury, A., Liang, Z., Vaswani, K., Darwin: An approach for debugging evolving programs (2009) ESEC / SIGSOFT FSE '09, , Amsterdam, The Netherlands: ACM; Quinlan, J., (1993) C4.5: Programs for Machine Learning, , Morgan Kaufmann; Renieris, M., Reiss, S., Fault localization with nearest neighbor queries (2003) Proc. of Int. Conf. on Automated Software Engineering, pp. 141-154; Reps, T., Ball, T., Das, M., Larus, J., The use of program profiling for software maintenance with applications to the year 2000 problem (1997) ESEC/FSE; Shortliffe, E., Buchanan, B., A model of inexact reasoning in medicine (1975) Mathematical Biosciences, 23, p. 351379; Harrold, S.J.M., Rothermel, G., Aristotle Analysis System - Siemens Programs, HR Variants, , http://www.cc.gatech.edu/aristotle/Tools/subjects/; Smyth, P., Goodman, R., An information theoretic approach to rule induction from databases (1992) IEEE Trans. Knowledge and Data Eng., 4 (4), pp. 301-316; Sterling, C.D., Olsson, R.A., Automated bug isolation via program chipping (2007) Software: Practice and Experience (SP & E), 37 (10), pp. 1061-1086. , August, john Wiley & Sons, Inc; Tallam, S., Tian, C., Gupta, R., Dynamic slicing of multithreaded programs for race detection (2008) Proc. of ICSM; Tan, P.-N., Kumar, V., Srivastava, J., Selecting the right interestingness measure for association patterns (2002) KDD, pp. 32-41; Tassey, G., The economic impacts of inadequate infrastructure for software testing (2002) National Institute of Standards and Technology. Planning Report 02-3.2002; Yule, G.U., On the association of attributes in statistics (1900) Philosophical Transcriptions of the Royal Society, A194, pp. 257-319; Yule, G.U., On the methods of measuring association between two attributes (1912) Journal of the Royal Statistical Society, 75, pp. 579-642; Zeller, A., Hildebrandt, R., Simplifying and isolating failure-inducing input (2002) IEEE Transaction on Software Engineering, 28, pp. 183-200; Zeller, A., Isolating cause-effect chains from computer programs (2002) FSE, pp. 1-10; Zeller, A., (2009) Why Programs Fail: A Guide to Systematic Debugging, , 2nd ed., T. Cox, Ed. Morgan Kaufmann; Zhang, X., Gupta, N., Gupta, R., Locating faults through automated predicate switching (2006) ICSE","Lucia; School of Information Systems, Singapore; email: lucia.2009@smu.edu.sg",,"IEEE Computer Society;ACI Worldwide;Microsoft;IBM;Alcatel-Lucent",,"2010 IEEE International Conference on Software Maintenance, ICSM 2010","12 September 2010 through 18 September 2010","Timisoara",82750,,9781424486298,,,"English","IEEE Int. Conf. Softw. Maint. ICSM",Conference Paper,"Final","All Open Access, Green",Scopus,2-s2.0-78650139747
