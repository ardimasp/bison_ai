Authors,Author(s) ID,Title,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,Cited by,DOI,Link,Affiliations,Authors with affiliations,Abstract,Author Keywords,Index Keywords,Molecular Sequence Numbers,Chemicals/CAS,Manufacturers,Funding Details,Funding Text 1,References,Correspondence Address,Editors,Sponsors,Publisher,Conference name,Conference date,Conference location,Conference code,ISSN,ISBN,CODEN,PubMed ID,Language of Original Document,Abbreviated Source Title,Document Type,Publication Stage,Open Access,Source,EID
"Soewito B., Suwandaru A.","24473788700;57221061110;","Android sensitive data leakage prevention with rooting detection using Java function hooking",2020,"Journal of King Saud University - Computer and Information Sciences",,,,"","",,1,"10.1016/j.jksuci.2020.07.006","https://www.scopus.com/inward/record.uri?eid=2-s2.0-85088982635&doi=10.1016%2fj.jksuci.2020.07.006&partnerID=40&md5=070845bffc7edb20f0f6567297ceaa43","Computer Science Department, Binus Graduate Program – Master of Computer Science, Bina Nusantara University, Jakarta, 11480, Indonesia","Soewito, B., Computer Science Department, Binus Graduate Program – Master of Computer Science, Bina Nusantara University, Jakarta, 11480, Indonesia; Suwandaru, A., Computer Science Department, Binus Graduate Program – Master of Computer Science, Bina Nusantara University, Jakarta, 11480, Indonesia","Running applications on a rooting device makes the application vulnerable to data leakage. Therefore, many applications that require a high level of security are not allowed to run on rooted device. Common technique of detecting rooted device is by using Android API to discover rooting trace. However, the detection can be bypassed using Java function hooking script by the people who want to run the app on rooted device. This research will give illustration that the bypassing process becomes more easy with automation tool and hybrid analysis. In order to create the script, we use combination of static and dynamic analysis with three phases with specific function. Phase 1 aims to detect the estimated Java method that detect rooting, phase 2 will analyze that method on an unrooted device, then phase 3 will create the bypassing script based on the previous result. We also use automation tool to speed up the static analysis. We create two types of script: one that can be used on general application, and the other one that only can be used on specific app. Those types implement different scope: one with the certain Java method, and the other one with specific parameter or return value. In the end, we find that bypassing rooting detection is not complicated if the app use Java function to detect the rooted device. To complicate bypassing process, we encourage the developers to implement more advanced detection rooting technique. © 2020 The Authors","Android rooting; Java hooking; Rooting detection; Rooting detection bypass",,,,,"Kementerian Riset, Teknologi dan Pendidikan Tinggi: 12/AKM/PNT/2019, 039/VR","The authors would like to thank the Ministry of Research, Technology and Higher Education of the Republic of Indonesia for their support in making this research possible. This research was supported by Awarded Research Grant scheme 2019, No. 12/AKM/PNT/2019, 039/VR.RTT/IV/2019.","Shao, Y., Luo, X., Qian, C., Rootguard: protecting rooted android phones (2014) Computer, 47 (6), pp. 32-40; Sun, S.T., Cuadros, A., Beznosov, K., Android rooting: Methods, detection, and evasion. In Proceedings of the 5th Annual ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices 2015 Oct 12 (pp. 3-14); https://en.miui.com/unlock/, Apply for unlocking Mi devices. Retrieved from miui: from:; https://developers.google.com/android/images, Factory Images for Nexus and Pixel Devices. Retrieved from google:; Zhou, Y., Jiang, X., Dissecting android malware: characterization and evolution. In 2012 IEEE Symposium on Security and Privacy 2012 May 20 (pp. 95-109). IEEE; Ng, Y.Y., Zhou, H., Ji, Z., Luo, H., Dong, Y., Which android app store can be trusted in china? In 2014 IEEE 38th Annual Computer Software and Applications Conference 2014 Jul 21 (pp. 509-518). IEEE; Bojjagani, S., Sastry, V.N., VAPTAi: A Threat Model for Vulnerability Assessment and Penetration Testing of Android and iOS Mobile Banking Apps. 2017 IEEE 3rd International Conference on Collaboration and Internet Computing (CIC) 2017 Oct 15 (pp. 77-86). IEEE; Casati, L., Visconti, A., The dangers of rooting: data leakage detection in android applications (2018) Mobile Inf. Systems, 2018; Zhang, Z., Wang, Y., Jing, J., Wang, Q., Lei, L., Once root always a threat: analyzing the security threats of android permission system. In Australasian Conference on Information Security and Privacy 2014 Jul 7 (pp. 354-369). Springer, Cham; Xing, L., Pan, X., Wang, R., Yuan, K., Wang, X., Upgrading your android, elevating my malware: privilege escalation through mobile os updating. 2014 IEEE Symposium on Security and Privacy 2014 May 18 (pp. 393-408). IEEE; Nguyen-Vu, L., Chau, N.T., Kang, S., Jung, S., Android Rooting: An Arms Race Between Evasion and Detection (2017), Security and Communication Networks; Geist, D., Nigmatullin, M., Bierens, R., Jailbreak/Root Detection Evasion Study on iOS and Android. MSc System and Network Engineering. 2016 Aug 23; Ramírez-López, F.J., Varela-Vaca, Á.J., Ropero, J., Luque, J., Carrasco, A., A framework to secure the development and auditing of SSL pinning in mobile applications: the case of android devices (2019) Entropy, 21 (12), p. 1136; Sierra, F., Ramirez, A., Defending your android app. In Proceedings of the 4th Annual ACM Conference on Research in Information Technology 2015 Sep 29 (pp. 29-34); Jiang, X., Liu, M., Yang, K., Liu, Y., Wang, R., A Security Sandbox Approach of Android Based on Hook Mechanism (2018), Security and Communication Networks; Pan, J.Y., Ma, S.H., Advertisement removal of Android applications by reverse engineering. In 2017 International Conference on Computing, Networking and Communications (ICNC) 2017 Jan 26 (pp. 695-700). IEEE; Tuan, L.H., Cam, N.T., Pham, V.H., Enhancing the accuracy of static analysis for detecting sensitive data leakage in Android by using dynamic analysis (2019) Cluster Comput., 22 (1), pp. 1079-1085; Dong, S., Li, M., Diao, W., Liu, X., Liu, J., Li, Z., Understanding Android obfuscation techniques: a large-scale investigation in the wild (2018) International Conference on Security and Privacy in Communication Systems, pp. 172-192. , Springer Cham; https://owasp.org/www-project-mobile-top-10/2016-risks/m2-insecure-data-storage, M2: Insecure Data Storage. Retrieved from OWASP:; https://github.com/OWASP/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md, Data Storage on Android. Retrieved from github:; https://codeshare.frida.re/@dzonerzy/fridantiroot/, fridantiroot. Retrieved from Frida:; Kellner, A., Horlboge, M., Rieck, K., Wressnegger, C., False sense of security: a study on the effectivity of jailbreak detection in banking apps. In 2019 IEEE European Symposium on Security and Privacy (EuroS&P) 2019 Jun 17 (pp. 1-14). IEEE; Totosis, N., Patsakis, C., Android hooking revisited. In 2018 IEEE 16th Intl Conf on Dependable, Autonomic and Secure Computing, 16th Intl Conf on Pervasive Intelligence and Computing, 4th Intl Conf on Big Data Intelligence and Computing and Cyber Science and Technology Congress (DASC/PiCom/DataCom/CyberSciTech) 2018 Aug 12 (pp. 552-559). IEEE; Kan, Z., Wang, H., Wu, L., Guo, Y., Xu, G., Deobfuscating Android native binary code. In 2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion) 2019 May 25 (pp. 322-323). IEEE; Lim, K., Jeong, J., Cho, S.J., Choi, J., Park, M., Han, S., Jhang, S., An anti-reverse engineering technique using native code and obfuscator-LLVM for Android applications. In Proceedings of the International Conference on Research in Adaptive and Convergent Systems 2017 Sep 20 (pp. 217-221)","Soewito, B.; Computer Science Department, Indonesia; email: bsoewito@binus.edu",,,"King Saud bin Abdulaziz University",,,,,13191578,,,,"English","J. King Saud Univ. - Comput. Inform. Sci.",Article,"Article in Press","All Open Access, Gold",Scopus,2-s2.0-85088982635
